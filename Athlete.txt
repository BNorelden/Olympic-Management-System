class Athlete extends User:
	private:
		String country
		char gender
		ArrayList sport
		AthleteSchedule schedule
	public:
		Athlete(String name, String phoneNum, int age, String email, String country, char gender, ArrayList sport) throws InputException:
			super(name, phoneNum, age, email)
			setCountry(country)
			setGender(gender)
			setSports(sport)
			schedule = new AthleteSchedule()

		void setCountry(String country) throws InputException:
			for(int i = 0; i < country.length(); i++):
				character = country.charAt(i)
				if(character != ' ' && (character < 'A' || (character > 'Z' && character < 'a') || character > 'z')):
					throw new InputException("Country names do not contain numbers or special characters!")
			this.country = country

		void setGender(char gender) throws InputException:
			if(gender != 'M' && gender != 'F')
				throw new InputException("Invalid option for gender!")
			this.gender = gender

		void setSports(ArrayList sport):
			this.sport = sport

		String getCountry():
			return country

		char getGender():
			return gender

		ArrayList getSports():
			return sport

		AthleteSchedule checkSchedule():
			return schedule

		void scheduleAutograph(String name, String venue, int month, int day, int year, int startHour, int startMinute,
		int endHour, int endMinute, int seats) throws TimeConflictException:
			Event e = new Event(name, null, 'S', venue, month, day, year, startHour, startMinute, endHour, endMinute, 0, seats)
			e.addParticipant(this)
			bookEvent(e)
			eventSchedule.addEvent(e)
			eventSchedule.informUsers(e.getName() + " by " + this.name + " was just scheduled! Check it out!")

		void cancelAutograph(Event e):
			unbookEvent(e)
			eventSchedule.dropEvent(e)
			eventSchedule.informUsers(e.getName() + " by " + this.name + " was cancelled. We apologize for any inconvenience.")

		void updateAutograph(Event e, String venue, int month, int day, int year, int startHour, int startMinute,
		int endHour, int endMinute):
			e.setVenue(venue)
			e.setDate(month, day, year)
			e.setTime(startHour, startMinute, endHour, endMinute)
			eventSchedule.informUsers("Please be advised that one of our events have changed! " + e.getName() + " is now being held at " + venue + " on " + month + "/" + day + "/" + year + " from " + startHour + ":" + startMinute + " -- " + endHour + ":" + endMinute + ".")

		void updateAutograph(Event e, int month, int day, int year, int startHour, int startMinute, int endHour, int endMinute):
			e.setDate(month, day, year)
			e.setTime(startHour, startMinute, endHour, endMinute)
			eventSchedule.informUsers("Please be advised that one of our events have changed! " + e.getName() + " is now being held on " + month + "/" + day + "/" + year + " from " + startHour + ":" + startMinute + " -- " + endHour + ":" + endMinute + ".")

		void updateAutograph(Event e, int startHour, int startMinute, int endHour, int endMinute):
			e.setTime(startHour, startMinute, endHour, endMinute)
			eventSchedule.informUsers("Please be advised that one of our events have changed! " + e.getName() + " is now being held from " + startHour + ":" + startMinute + " -- " + endHour + ":" + endMinute + ".")

		void bookEvent(Event e) throws TimeConflictException:
			schedule.addEvent(e)

		void unbookEvent(Event e):
			schedule.dropEvent(e)

		void requestFreeTicket(Event e) throws EventUnavailableException:
			if(!e.isAvailable()):
				throw new EventUnavailableException(e)
			ticCount++
			Ticket tic = new Ticket(ticCount, e)
			ticket.add(tic)
			ticket.get(ticket.size() - 1).displayTicket()