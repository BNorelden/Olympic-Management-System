class Athlete extends User:
	private:
		String country
		char gender
		ArrayList sport
		AthleteSchedule schedule
	public:
		Athlete(String name, String phoneNum, int age, String email, String country, char gender, ArrayList sport) throws InputException:
			super(name, phoneNum, age, email)
			setCountry(country)
			setGender(gender)
			setSports(sport)
			schedule = new AthleteSchedule()

		void setCountry(String country) throws InputException:
			for(int i = 0; i < country.length(); i++):
				character = country.charAt(i)
				if(character != ' ' && (character < 'A' || (character > 'Z' && character < 'a') || character > 'z')):
					throw new InputException("Country names do not contain numbers or special characters!")
			this.country = country

		void setGender(char gender) throws InputException:
			if(gender != 'M' && gender != 'F')
				throw new InputException("Invalid option for gender!")
			this.gender = gender

		void setSports(ArrayList sport):
			this.sport = sport

		String getCountry():
			return country

		char getGender():
			return gender

		ArrayList getSports():
			return sport

		AthleteSchedule checkSchedule():
			return schedule

		void scheduleAutograph(String name, String venue, int startDay, int startMonth, int startHr, int startMin,
		int endDay, int endMonth, int endHr, int endMin, int year, String zone, int seats) throws InputException, TimeConflictException:
			Event e = new Event(name, null, 'S', venue, startDay, startMonth, startHr, startMin, endDay, endMonth, endHr, endMin, year, zone, 0, seats)
			e.addParticipant(this)
			bookEvent(e)
			eventSchedule.addEvent(e)
			eventSchedule.informUsers(e.getName() + " by " + this.name + " was just scheduled! Check it out!")

		void cancelAutograph(Event e) throws InputException:
			unbookEvent(e)
			eventSchedule.dropEvent(e)
			eventSchedule.informUsers(e.getName() + " by " + this.name + " was cancelled. We apologize for any inconvenience.")

		void updateAutograph(Event e, String venue, int startDay, int startMonth, int startHr, int startMin, int endDay, int endMonth, int endHr, int endMin, int year, String zone):
			e.setVenue(venue)
			e.setStartDate(startDay, startMonth, year)
			e.setStartTime(startHr, startMin, zone)
			e.setEndDate(endDay, endMonth, year)
			e.setEndTime(endHr, endMin, zone)
			String startDateTime = e.getStartDateTime().format(DateTimeFormatter.ofPattern("d/M/yyyy h:mm z"))
			String endDateTime = e.getEndDateTime().format(DateTimeFormatter.ofPattern("d/M/yyyy h:mm z"))
			eventSchedule.informUsers("Please be advised that one of our autograph sessions have changed! " + e.getName() + " is now being held at " + venue + " from " + startDateTime + " -- " + endDateTime)

		void updateAutograph(Event e, int startDay, int startMonth, int startHr, int startMin, int endDay, int endMonth, int endHr, int endMin, int year, String zone):
			e.setStartDate(startDay, startMonth, year)
			e.setStartTime(startHr, startMin, zone)
			e.setEndDate(endDay, endMonth, year)
			e.setEndTime(endHr, endMin, zone)
			String startDateTime = e.getStartDateTime().format(DateTimeFormatter.ofPattern("d/M/yyyy h:mm z"))
			String endDateTime = e.getEndDateTime().format(DateTimeFormatter.ofPattern("d/M/yyyy h:mm z"))
			eventSchedule.informUsers("Please be advised that one of our autograph sessions have changed! " + e.getName() + " is now being held from " + startDateTime + " -- " + endDateTime)

		void updateAutograph(Event e, int startHr, int startMin, int endHr, int endMin, String zone):
			e.setStartTime(startHr, startMin, zone)
			e.setEndTime(endHr, endMin, zone)
			String startTime = e.getStartDateTime().format(DateTimeFormatter.ofPattern("h:mm z"))
			String endTime = e.getEndDateTime().format(DateTimeFormatter.ofPattern("h:mm z"))
			eventSchedule.informUsers("Please be advised that one of our autograph sessions have changed! " + e.getName() + " is now being held from " + startTime + " -- " + endTime + ".")

		void bookEvent(Event e) throws InputException, TimeConflictException:
			schedule.addEvent(e)

		void unbookEvent(Event e) throws InputException:
			schedule.dropEvent(e)

		void requestFreeTicket(Event e) throws EventUnavailableException:
			if(!e.isAvailable()):
				throw new EventUnavailableException(e)
			ticCount++
			Ticket tic = new Ticket(ticCount, e)
			ticket.add(tic)
			tic.displayTicket()