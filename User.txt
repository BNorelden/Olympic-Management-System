class User:
	protected:
		String name
		String phoneNum
		int age
		String email
		static int ticCount = 0
		ArrayList ticket
	public:
		User(String name, String phoneNum, int age, String email) throws InputException:
			setName(name)
			setPhoneNum(phoneNum)
			setAge(age)
			setEmail(email)

		void setName(String name) throws InputException:
			for(int i = 0; i < name.length(); i++):
				char character = name.charAt(i)
				if(character != ' ' && (character < 'A' || (character > 'Z' && character < 'a') || character > 'z')):
					throw new InputException("Names are not allowed to contain numbers or special characters!")
			this.name = name

		void setPhoneNum(String phoneNum) throws InputException:
			if(phoneNum.length() != 10):
				throw new InputException("Phone numbers must contain 10 digits!")
			for(int i = 0; i < phoneNum.length(); i++):
				char digit = phoneNum.charAt(i)
				if(digit < '0' || digit > '9'):
					throw new InputException("Invalid phone number!")
			this.phoneNum = phoneNum

		void setAge(int age) throws InputException:
			if(age <= 0):
				throw new InputException("Age must be greater than zero!")
			this.age = age

		void setEmail(String email) throws InputException:
			if(!email.matches("(.*)@(.*).com") && !email.matches("(.*)@(.*).net") && !email.matches("(.*)@(.*).org") &&
			!email.matches("(.*)@(.*).edu") && !email.matches("(.*)@(.*).gov")):
				throw new InputException("Invalid email format!")
			this.email = email

		String getName():
			return name

		String getPhoneNum():
			return phoneNum

		int getAge():
			return age

		String getEmail():
			return email

		ArrayList getTickets():
			return ticket

		void buyTicket(Event e) throws EventUnavailableException:
			if(!e.isAvailable()):
				throw new EventUnavailableException(e)
			/*Payment activity*/
			ticCount++
			Ticket tic = new Ticket(ticCount, e)
			ticket.add(tic)
			ticket.get(ticket.size() - 1).displayTicket()
		
		void cancelTicket(Ticket t):
			ticket.remove(t)