class Employee extends User:
	public:
		Employee(String name, String phoneNum, int age, String email) throws InputException:
			super(name, phoneNum, age, email)

		void registerAthlete(String name, int phoneNum, int age, String email, String password, String country,
		char gender, ArrayList sport) throws InputException:
			Athlete a = new Athlete(name, phoneNum, age, email, country, gender, sport)
			/*Add Athlete a to database*/
			/*Add password to Athlete a in database*/

		void schedule(String name, String category, char type, String venue, int startDay, int startMonth, int startHr, int startMin, 
		int endDay, int endMonth, int endHr, int endMin, int year, String zone, float price, int seats, ArrayList athlete) throws InputException, TimeConflictException:
			Event e = new Event(name, category, type, venue, startDay, startMonth, startHr, startMin, endDay, endMonth, endHr, endMin, year, zone, price, seats)
			eventSchedule.addEvent(e)
			for(int i = 0; i < athlete.size(); i++):
				Athlete a = athlete.get(i)
				e.addParticipant(a)
				a.bookEvent(e)
			if(type == 'C'):
				e.notifySecurity(e)
			String startTime = e.getStartDateTime().format(DateTimeFormatter.ofPattern("d/M/yyyy h:mm z"))
			String endTime = e.getEndDateTime().format(DateTimeFormatter.ofPattern("d/M/yyyy h:mm z"))
			eventSchedule.informUsers(name + " was just scheduled! It is being held at " + venue + " from " + startTime " -- " + endTime + ". Check it out!")

		void cancelEvent(Event e) throws InputException:
			for(int i = 0; i < e.participant.size(); i++):
				Athlete athlete = e.participant.get(i)
				athlete.unbookEvent(e)
			eventSchedule.dropEvent(e)
			String date = e.getStartDateTime().format(DateTimeFormatter.ofPattern("d/M/yyyy"))
			eventSchedule.informUsers(e.getName() + " held on " + date + " was cancelled. We apologize for any inconvenience.)

		void update(Event e, String venue, int startDay, int startMonth, int startHr, int startMin, int endDay, int endMonth, int endHr, int endMin, int year, String zone):
			e.setVenue(venue)
			e.setStartDate(startDay, startMonth, year)
			e.setStartTime(startHr, startMin, zone)
			e.setEndDate(endDay, endMonth, year)
			e.setEndTime(endHr, endMin, zone)
			String startDateTime = e.getStartDateTime().format(DateTimeFormatter.ofPattern("d/M/yyyy h:mm z"))
			String endDateTime = e.getEndDateTime().format(DateTimeFormatter.ofPattern("d/M/yyyy h:mm z"))
			eventSchedule.informUsers("Please be advised that one of our events have changed! " + e.getName() + " is now being held at " + venue + " from " + startDateTime + " -- " + endDateTime)

		void update(Event e, int startDay, int startMonth, int startHr, int startMin, int endDay, int endMonth, int endHr, int endMin, int year, String zone):
			e.setStartDate(startDay, startMonth, year)
			e.setStartTime(startHr, startMin, zone)
			e.setEndDate(endDay, endMonth, year)
			e.setEndTime(endHr, endMin, zone)
			String startDateTime = e.getStartDateTime().format(DateTimeFormatter.ofPattern("d/M/yyyy h:mm z"))
			String endDateTime = e.getEndDateTime().format(DateTimeFormatter.ofPattern("d/M/yyyy h:mm z"))
			eventSchedule.informUsers("Please be advised that one of our events have changed! " + e.getName() + " is now being held from " + startDateTime + " -- " + endDateTime)

		void update(Event e, int startHr, int startMin, int endHr, int endMin, String zone):
			e.setStartTime(startHr, startMin, zone)
			e.setEndTime(endHr, endMin, zone)
			String startTime = e.getStartDateTime().format(DateTimeFormatter.ofPattern("h:mm z"))
			String endTime = e.getEndDateTime().format(DateTimeFormatter.ofPattern("h:mm z"))
			eventSchedule.informUsers("Please be advised that one of our events have changed! " + e.getName() + " is now being held from " + startTime + " -- " + endTime + ".")

		void update(Event e, Athlete old, Athlete new):
			e.dropParticipant(old)
			e.addParticipant(new)
			eventSchedule.informUsers("Please be advised that one of our events have changed! The athlete " + old + " is no longer participating in " + e.getName() + ". Instead, " + new + " will take their place in this event.")

		void requestFreeTicket(Event e) throws EventUnavailableException:
			if(!e.isAvailable()):
				throw new EventUnavailableException(e)
			ticCount++
			Ticket tic = new Ticket(ticCount, e)
			ticket.add(tic)
			tic.displayTicket()