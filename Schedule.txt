class Schedule:
	protected:
		ArrayList event
	public:
		Schedule():
			event = new ArrayList<Event>()

		void addEvent(Event e) throws InputException, TimeConflictException:
			if(event.contains(e)):
				throw new InputException("Event already exists in schedule!")
			Event conflicted = conflict(e)
			if(conflicted != null):
				throw new TimeConflictException(e, conflicted)
			event.add(e)

		void dropEvent(Event e) throws InputException:
			if(!event.contains(e)):
				throw new InputException("Event does not exist in this schedule!")
			event.remove(e)

		Event searchName(String name):
			Event result = null

			for(int i = 0; i < event.size(); i++):
				Event e = event.get(i)
				if(e.getName() == name):
					result = e
					break
			
			return result

		ArrayList searchCat(String category):
			ArrayList result = new ArrayList<Event>()

			for(int i = 0; i < event.size(); i++):
				Event e = event.get(i)
				if(e.getCat() == category):
					result.add(e)

			return result

		ArrayList searchType(char type):
			ArrayList result = new ArrayList<Event>()

			for(int i = 0; i < event.size(); i++):
				Event e = event.get(i)
				if(e.getType() == type):
					result.add(e)

			return result

		ArrayList searchVen(String venue):
			ArrayList result = new ArrayList<Event>()

			for(int i = 0; i < event.size(); i++):
				Event e = event.get(i)
				if(e.getVenue() == venue):
					result.add(e)

			return result

		ArrayList searchDate(int[] date):
			ArrayList result = new ArrayList<Event>()

			for(int i = 0; i < event.size(); i++):
				Event e = event.get(i)
				if(Arrays.equals(e.getDate(), date):
					result.add(e)

			return result

		ArrayList searchTime(int[] time):
			ArrayList result = new ArrayList<Event>()

			for(int i = 0; i < event.size(); i++):
				Event e = event.get(i)
				if(Arrays.equals(e.getTime(), time):
					result.add(e)

			return result

		Event conflict(Event first):
			int hoursApart = 1;
			int[] firstTime = first.getTime()
			int firstStartHour = firstTime[0], firstStartMinute = firstTime[1]
			int firstEndHour = firstTime[2], firstEndMinute = firstTime[3]

			for(int i = 0; i < event.size(); i++):
				Event second = event.get(i)
				if(first.getDate() == second.getDate()):
					int[] secondTime = second.getTime()
					int secondStartHour = secondTime[0], secondStartMinute = secondTime[1]
					int secondEndHour = secondTime[2], secondEndMinute = secondTime[3]
					if(firstEndHour > secondStartHour - hoursApart && firstStartHour - hoursApart < secondEndHour):
						return second
					else if(firstEndHour == secondStartHour - hoursApart):
						if(firstEndMinute > secondStartMinute):
							return second
					else if(secondEndHour == firstStartHour - hoursApart):
						if(secondEndMinute > firstStartMinute):
							return second
			return null

class EventSchedule extends Schedule:
	public:
		EventSchedule():
			super()		

		void notifySecurity(Event ceremony):
			/*Inform security of award ceremony scheduled*/

		void informUsers(String msg):
			/*Invoke activity that informs all users of event change*/

class AthleteSchedule extends Schedule:
	public:
		AthleteSchedule():
			super()