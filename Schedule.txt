class Schedule:
	protected:
		ArrayList event
	public:
		Schedule():
			event = new ArrayList<Event>()

		void addEvent(Event e) throws InputException, TimeConflictException:
			if(event.contains(e)):
				throw new InputException("Event already exists in schedule!")
			Event conflicted = conflict(e)
			if(conflicted != null):
				throw new TimeConflictException(e, conflicted)
			event.add(e)

		void dropEvent(Event e) throws InputException:
			if(!event.contains(e)):
				throw new InputException("Event does not exist in this schedule!")
			event.remove(e)

		Event searchName(String name):
			Event result = null

			for(int i = 0; i < event.size(); i++):
				Event e = event.get(i)
				if(e.getName() == name):
					result = e
					break
			
			return result

		ArrayList searchCat(String category):
			ArrayList result = new ArrayList<Event>()

			for(int i = 0; i < event.size(); i++):
				Event e = event.get(i)
				if(e.getCat() == category):
					result.add(e)

			return result

		ArrayList searchType(char type):
			ArrayList result = new ArrayList<Event>()

			for(int i = 0; i < event.size(); i++):
				Event e = event.get(i)
				if(e.getType() == type):
					result.add(e)

			return result

		ArrayList searchVen(String venue):
			ArrayList result = new ArrayList<Event>()

			for(int i = 0; i < event.size(); i++):
				Event e = event.get(i)
				if(e.getVenue() == venue):
					result.add(e)

			return result

		ArrayList searchDate(String date):
			ArrayList result = new ArrayList<Event>()

			for(int i = 0; i < event.size(); i++):
				Event e = event.get(i)
				ZonedDateTime dateTime = e.getStartDateTime()
				String thisDate = dateTime.format(DateTimeFormatter.ofPattern("d/M/yyyy"))
				if(thisDate == date):
					result.add(e)

			return result

		ArrayList searchTime(String time):
			ArrayList result = new ArrayList<Event>()

			for(int i = 0; i < event.size(); i++):
				Event e = event.get(i)
				ZonedDateTime dateTime = e.getStartDateTime()
				String thisTime = dateTime.format(DateTimeFormatter.ofPattern("h:mm z"))
				if(thisTime == time):
					result.add(e)

			return result

		Event conflict(Event first):
			Event second
			int hoursApart = 1
			String firstStartTime = first.getStartDateTime().minusHours(hoursApart).format("d/M/yyyy h:mm")
			String firstEndTime = first.getEndDateTime().plusHours(hoursApart).format("d/M/yyyy h:mm")
			for(int i = 0; i < event.size(); i++):
				second = event.get(i)
				String secondStartTime = second.getStartDateTime().format("d/M/yyyy h:mm")
				String secondEndTime = second.getEndDateTime().format("d/M/yyyy h:mm")
				if(firstEndTime.compareTo(secondStartTime) > 0 && firstStartTime.compareTo(secondEndTime) < 0):
					return second
			return null

class EventSchedule extends Schedule:
	public:
		EventSchedule():
			super()		

		void notifySecurity(Event ceremony):
			/*Inform security of award ceremony scheduled*/

		void informUsers(String msg):
			/*Invoke activity that informs all users of event change*/

class AthleteSchedule extends Schedule:
	public:
		AthleteSchedule():
			super()